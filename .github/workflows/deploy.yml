name: deploy

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-central-1'
  AWS_VPC_DEFAULT_SG_ID: ${{ secrets.AWS_VPC_DEFAULT_SG_ID }}
  AWS_SUBNET_ID_1: ${{ secrets.AWS_SUBNET_ID_1 }}
  AWS_SUBNET_ID_2: ${{ secrets.AWS_SUBNET_ID_2 }}
  AWS_SUBNET_ID_3: ${{ secrets.AWS_SUBNET_ID_3 }}

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setenv.outputs.environment}}

    steps:
      - name: Set environment
        id: setenv
        run: |
          if [[ "${{github.ref}}" == refs/tags/v* ]]; then
            echo "Setting mainnet environment"
            echo "::set-output name=environment::mainnet"
          elif [[ "${{github.base_ref}}" == "main" || "${{github.ref}}" == "refs/heads/main" ]]; then
            echo "Setting testnet environment"
            echo "::set-output name=environment::testnet"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: init

    environment: ${{ needs.init.outputs.environment }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Set up Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: /home/runner/work/hathor-explorer/hathor-explorer/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: |
          pip -q --no-input install poetry
          make install
      - name: Linters
        run: |
          poetry run make check
      - name: Deploy Lambdas Testnet
        if: ${{ needs.init.outputs.environment == 'testnet' }}
        run: |
          npx make deploy-lambdas-testnet
        env:
          API_PORT: 3001
          HATHOR_CORE_DOMAIN: node1.testnet.hathor.network
          HATHOR_NODES: node1.testnet.hathor.network
          REDIS_KEY_PREFIX: hathor-explorer-service-testnet
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: 6379
          REDIS_DB: 0
          METADATA_BUCKET: hathor-explorer-metadata-testnet
          CORS_ALLOWED_REGEX: https?://([a-z0-9]+[.])*hathor[.]network
          NODE_CACHE_TTL: 30
      - name: Deploy Lambdas Mainnet
        if: ${{ needs.init.outputs.environment == 'mainnet' }}
        run: |
          npx make deploy-lambdas-mainnet
        env:
          API_PORT: 3001
          HATHOR_CORE_DOMAIN: node.explorer.hathor.network
          HATHOR_NODES: node.explorer.hathor.network,node1.mainnet.hathor.network,node2.mainnet.hathor.network
          REDIS_KEY_PREFIX: hathor-explorer-service-mainnet
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: 6379
          REDIS_DB: 0
          METADATA_BUCKET: hathor-explorer-metadata-mainnet
          CORS_ALLOWED_REGEX: https?://([a-z0-9]*\.){0,5}hathor\.network
          NODE_CACHE_TTL: 30
      - name: Deploy Daemons Testnet
        if: ${{ needs.init.outputs.environment == 'testnet' }}
        run: |
          timestamp=`date +%s`; \
          export DOCKER_IMAGE_TAG=testnet-${{ github.sha }}-$timestamp
          make deploy-daemons
      - name: Deploy Daemons Mainnet
        if: ${{ needs.init.outputs.environment == 'mainnet' }}
        run: |
          export DOCKER_IMAGE_TAG=${GITHUB_REF#refs/*/}
          make deploy-daemons
      - name: Clean
        run: |
          rm /home/runner/.docker/config.json
